" jmhobbs vimrc
"
" Odds and ends taken from:
"  https://github.com/nicknisi/dotfiles/blob/master/vim/vimrc.symlink
"  https://github.com/jerodsanto/dotfiles/blob/master/vimrc
"


""""""""""""""""
" Vundle Setup "
""""""""""""""""
set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

" AIRLINE
Bundle 'bling/vim-airline'

" Document Tree View
Bundle 'scrooloose/nerdtree'

" Close the buffer, leave the window
Bundle 'rgarver/Kwbd.vim'

" Commenter Tools
Bundle 'scrooloose/nerdcommenter'

" External Syntax Checking
Bundle 'scrooloose/syntastic'

" Fancy Status Line
Bundle 'scrooloose/vim-statline'

" Python Stuff
Bundle "klen/python-mode"

" Extra Syntax Highlighters
Bundle 'hallison/vim-markdown'
Bundle 'groenewege/vim-less'

" Color Schemes
Bundle 'fugalh/desert.vim'

filetype plugin indent on

""""""""""""""""""
" / Vundle Setup "
""""""""""""""""""

" Be Pretty!
set t_Co=256
set background=dark
colorscheme desert

" UTF-8 FTW!
set encoding=utf-8

" Keep backup/swap centrally
set backupdir=~/.vim/backup
set dir=~/.vim/backup
set noswapfile

set smartindent

" Tabs == 2 spaces
set tabstop=2
set shiftwidth=2

" Spaces, not tabs
set expandtab

syntax enable               " Syntax highlighting
set incsearch               " Incremental search
set ignorecase              " Case-insensitive search by default
set smartcase               " Case-sensitive search if uppcase is used
set wildmenu                " Turn on tab completion menu
set wildmode=list:longest   " Make tab completion work like shell
set scrolloff=3             " Start scrolling viewport 3 lines ahead of cursor
set nofoldenable            " No code folding
set number                  " Show line nunbers
set laststatus=2            " Status line on
set showmatch               " Show matching braces
set nowrap                  " No line wrapping

"""""""""""""""
"  AIRLINE  "
"""""""""""""""

set guifont=Source\ Code\ Pro\ for\ Powerline:h14
let g:Powerline_symbols = 'fancy'
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8

if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_powerline_fonts=1

let g:airline_theme="molokai"

if has("gui_running")
	let s:uname = system("uname")
	if s:uname == "Darwin\n"
		set guifont=Source\ Code\ Pro\ for\ Powerline:h14
		let g:airline_left_sep=''
		let g:airline_right_sep=''
		let g:airline_powerline_fonts=0
	endif
endif

""""""""""""""""
" Key Mappings "
""""""""""""""""

" Change the leader
let mapleader = ","
let g:mapleader = ","


" Disable Arrow Keys (For Konowledge!)
"noremap  <Up> ""
"noremap! <Up> <Esc>
"noremap  <Down> ""
"noremap! <Down> <Esc>
"noremap  <Left> ""
"noremap! <Left> <Esc>
"noremap  <Right> ""
"noremap! <Right> <Esc>

" Expand %% into the current directory of the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Remove extra whitespace
nmap <leader><space> :%s/\s\+$<cr>

" Open/Close NERDTree with control-n
nmap <silent> <c-n> :NERDTreeToggle<CR>

" Nerd tree ignore .pyc files
let NERDTreeIgnore = ['\.pyc$']

""""""""""""""""""""
" Buffer Shortcuts "
""""""""""""""""""""

" Easy buffer switching with ctrl-left and ctrl-right
"noremap <silent> <C-left> :bp<CR>
"noremap <silent> <C-right> :bn<CR>

" Next Buffer
nmap <leader>n :bn<cr>
" Previous Buffer
nmap <leader>p :bp<cr>
" Close Buffer
nmap <leader>q :bd<cr>
" Switch between current and last buffer
nmap <leader>. <c-^>
nmap <leader>, <c-^>

" Call bclose with Ctrl-W !
nmap <C-W>! <Plug>Kwbd

""""""""""""""""""""""
" / Buffer Shortcuts "
""""""""""""""""""""""


""""""""""""""""""""
" Window Shortcuts "
""""""""""""""""""""

function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

map <silent> <C-h> :call WinMove('h')<cr>
map <silent> <C-j> :call WinMove('j')<cr>
map <silent> <C-k> :call WinMove('k')<cr>
map <silent> <C-l> :call WinMove('l')<cr>

map <leader>wc :wincmd q<cr>

" Equalize windows
map <leader>= <C-w>=

""""""""""""""""""""""
" / Window Shortcuts "
""""""""""""""""""""""

"""""""""""""""
" Python Mode "
"""""""""""""""
let g:pymode_lint = 1
let g:pymode_lint_write = 1
let g:pymode_lint_checker = "pyflakes,pep8"
let g:pymode_lint_minheight = 1
let g:pymode_lint_maxheight = 3

let g:pymode_folding = 0
let g:pymode_breakpoint = 0
let g:pymode_utils_whitespaces = 0
let g:pymode_doc = 0

" https://github.com/klen/python-mode/issues/384
set completeopt=menu

""""""""""""""""""""""
" / Window Shortcuts "
""""""""""""""""""""""


""""""""""""""""""
" / Key Mappings "
""""""""""""""""""

"" leader+r executes file 
nnoremap <leader>r :!%:p

