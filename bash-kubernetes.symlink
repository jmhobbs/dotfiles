function __kubectl_cluster {
  if [ "$KUBECONFIG" != "" ]; then
    CLUSTER=$(basename $KUBECONFIG 2> /dev/null)
    if [ "$CLUSTER" == "kubeconfig" ]; then
      CLUSTER=$(dirname $KUBECONFIG | sed 's/.*\///')
    fi
    echo -ne "[$KUBE_NAMESPACE@$CLUSTER]"
  fi
}

function use-cluster {
  if [ -f "$HOME/.kube/$1" ]; then
    export KUBECONFIG="$HOME/.kube/$1"
    if [ "$2" != "" ]; then
      export KUBE_NAMESPACE="$2"
    else
      export KUBE_NAMESPACE="default"
    fi
  else
    echo "Invalid cluster name"
    return 1
  fi

  if [ "$2" != "" ]; then
    export KUBE_NAMESPACE="$2"
  else
    export KUBE_NAMESPACE="default"
  fi
}

function use-namespace {
  if [ "$1" != "" ]; then
    export KUBE_NAMESPACE="$1"
  else
    export KUBE_NAMESPACE="default"
  fi
}

export KUBE_NAMESPACE="default"
alias kc='kubectl --namespace="$KUBE_NAMESPACE"'

function kcdb {
  kc get pod debug > /dev/null
  if [ $? == "0" ]; then
    kc exec debug --tty -i -- env COLUMNS=$COLUMNS LINES=$LINES bash
  else
    kc run debug --labels="debug=true" --generator=run-pod/v1 --image=jmhobbs/debug-box:v3 --tty -i -- env COLUMNS=$COLUMNS LINES=$LINES bash
  fi
}

function kccalicoctl {
  kc get pod calicoctl > /dev/null
  if [ $? == "0" ]; then
    kc exec calicoctl --tty -i -- env COLUMNS=$COLUMNS LINES=$LINES 
  else
    kc run calicoctl --labels="debug=true" --generator=run-pod/v1 --image=calico/ctl:v1.3.0 --tty -i -- env COLUMNS=$COLUMNS LINES=$LINES bash
  fi
}

function kcsh {
  kc exec $1 -c $2 --tty -i -- env COLUMNS=$COLUMNS ROWS=$ROWS TERM=$TERM bash
}

function node-info {
  aws ec2 describe-instances --filters Name=private-dns-name,Values=$1
}

function unpack-site-config {
  base64 --decode | gunzip | jq .
}
